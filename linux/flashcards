What does the first slot of the output of 'ls -l' mean?	It can be a dash (-) indicating a regular file, 'd' for a directory, 'l' for a link, 'c' for a character device.
What do the trailing 9 slots of the output of 'ls -l' mean?	Each group of 3 is the read, write and execute permissions for user, group and other.
What do chown and chgrp do?	To change the owner of a file, we use the chown command. The format is 'chown [new owner] file'. To change the file's group, we use the chgrp command, format 'chgrp [new group] file'. chown also allows you to go 'chown [new owner].[new group] file'
What does chmod do?	Chmod is another way to change the file's permissions. Permissions are also known as 'mode' in unix.
How do you set permissions in chmod absolute mode?	The numbers follow some simple rules: 400 owner read, 200 owner write, 100 owner execute, 40 group read, 20 group write, 10 group execute, 4 other read, 2 other write, 1 other execute. Add up the codes of the desired permissions. Modes run from 000 to 777.
What is SETUID?	Normally, when a program runs it inherits all the rights/restrictions of the user that executed it. Adding 4 to the beginning of the permission string gives the program the permissions of the owner (like 'chmod 4755 myscript'). {\bf You probably never want to use this for security reasons. It is usually ignored by the linux kernel}
What is SETGID?	the setgid bit is similar to the SETUID bit, but instead of applying to the files owner, it is applied to the files group setting. The chmod command is used by prefixing a 2 as first digit (like 'chmod 2755 myscript')
How does chmod relative mode work?	Only changes the permissions relative to the current permissions. There are three parts, '[entity][operator][permissions]'. Entities describe who gets the permissions. They are: \begin{itemize}\item 'u': user, the file's owner\\ \item 'g': group, the file's group,\item 'o': other, everybody else \item 'a': all, all three together \end{itemize}The operators decide whether to add, remove or emulate absolute mode (i.e. describe permissions from scractch) \begin{itemize}\item '+': add permission\item '-': remove permissions\item '=': emulate absolute mode\end{itemize}and the permissions are\begin{itemize}\item 'r': read permission\item 'w': write permission\item 'x': execute permission\end{itemize}
What is the sticky bit?	Linux directory permissions say that if a user has write permissions on a directory, they can rename or remove files there, even if the files don't belong to them. When the owner of the directory sets the sticky bit, renames/removals are only allowed by the files owner, the directories owner and the root user (sticky bit is setting with a leading 1 prefix in absolute mode, or +t in relative mode). Usually ignored by the linux kernel.
What do execute, read and write permissions mean?	Read:\begin{itemize}\item For a normal file, read permissions allow a user to view the contents of the file.\item For a directory, read permission allows a user to view the names of the files in the directory.\end{itemize}\\Write:\begin{itemize}\item For a normal file, write permissions allow a user to modify and delete the file.\item For a directory, write permission allows a user to delete the directory, modify its contents (create, delete, and rename files in it), and modify the contents of files that the user can read.\end{itemize}\\Execute:\begin{itemize}\item For a normal file, execute permission allows a user to execute a file (the user must also have read permission). As such, execute permissions must be set for executable programs and shell scripts before a user can run them.\item For a directory, execute permission allows a user to access, or traverse into (i.e. cd) and access metadata about files in the directory (the information that is listed in ls -l)
What is the default search order of man if no section number is given?	"1 n l 8 3 0 2 5 4 9 6 7" by default, unless overridden by the SECTION directive in /etc/man_db.conf
What are the section numbers of the system manual, and what types of pages do they typically contain?	       \begin{enumerate}\item Executable programs or shell commands\item System calls (functions provided by the kernel) \item Library calls (functions within program libraries) \item   Special files (usually found in /dev) \item   File formats and conventions eg /etc/passwd \item   Games \item   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7) \item   System administration commands (usually only for root) \item   Kernel routines [Non standard]\end{enumerate}
How are the following conventions used in the SYNOPSIS section? \begin{itemize}\item \textbf{bold text}\item\textit{italic text}\item[-abc]\item-a|-b\item argument ...\item[expression] ...\end{itemize}	\begin{itemize}\item \textbf{bold text}          type exactly as shown.  \item\textit{italic text}        replace with appropriate argument.  \item[-abc]             any or all arguments within [ ] are optional.  \item-a|-b              options delimited by | cannot be used together.\item argument ...       argument is repeatable. \item[expression] ...   entire expression within [ ] is repeatable.\end{itemize}
man man.7	Display the manual page for macro package man from section 7.
man -a intro	Display, in succession, all of the available intro manual pages contained within the manual.  It is possible to quit between successive displays or skip any of them.
Where are the licenses for installed pacakges usually stored?	/usr/share/licenses
How does man treat a space separated list of names given on the command line?	              By default, man will try to interpret pairs of manual page names given on the command line as equivalent to a single manual page name containing a hyphen or an underscore.  This  supports  the common  pattern of programs that implement a number of subcommands, allowing them to provide manual pages for each that can be accessed using similar syntax as would be used to invoke the sub‚Äêcommands themselves.  For example: \\ \$ man -aw git diff\\ /usr/share/man/man1/git-diff.1.gz \\To disable this behaviour, use the --no-subpages option.  \\\$ man -aw --no-subpages git diff\\ /usr/share/man/man1/git.1.gz\\ /usr/share/man/man3/Git.3pm.gz\\ /usr/share/man/man1/diff.1.gz
How can you view a man page in html?	man --html. It will try to open the man page with a browser in \$BROWSER (colon-delimited list of commands)



% vim:spell:ft=tex:nosi:nocin:noai:inde=:noet:ts=8:sts=4:sw=4
